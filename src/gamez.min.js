let _DEBUG=!1;var j,soundObject,_nu=[];let _Sprites={};var mouseX=0,mouseY=0;class SpriteNameError extends Error{constructor(t){super(t),this.name="SpriteNameError"}}class SpriteCreationError extends Error{constructor(t){super(t),this.name="SpriteCreationError"}}class CostumeError extends Error{constructor(t){super(t),this.name="CostumeError"}}class SoundNameError extends Error{constructor(t){super(t),this.name="SoundNameError"}}function pointTowardsXY(t,e,s,i){return Math.atan((s-t)/(i-e))/(Math.PI/2)*90+180*Number(e>i)}function updateMouse(t){mouseX=t.offsetX,mouseY=t.offsetY}class Game{constructor(t){_DEBUG=!1,this.fps=t,this.spriteList={}}setDebug(t){(_DEBUG=!!t)&&console.log(`Set debug to ${_DEBUG}`)}startGame(t){try{Setup(this,t)}catch(e){console.error("Could not find a Setup function. Please create a setup function.")}try{setTimeout(Update,1e3/this.fps,this,t)}catch(s){console.error("Could not find an Update function. Please create an update function.")}}}class Screen{constructor(t,e){this.rect=new ScreenRect(t,e),this.canvas=document.createElement("canvas"),this.canvas.parent=this,this.mouseDown=!1,this.bgColor="#000000",this.canvas.onmousemove=function(t){updateMouse(t)},this.canvas.onmousedown=function(t){this.mouseDown=!0},this.canvas.onmouseup=function(t){this.mouseDown=!1},this.canvas.width=this.rect.width,this.canvas.height=this.rect.height,document.body.appendChild(this.canvas)}createSprite(t){try{_Sprites[t]=new Sprite(t,this)}catch(e){throw new SpriteCreationError(`Creation of sprite '${t}' went wrong.`)}}getSprite(t){return _Sprites[t]}fillScreen(){var t=this.canvas.getContext("2d");t.fillStyle=this.bgColor,t.fillRect(0,0,this.canvas.width,this.canvas.height),t.fill()}setBgColor(t){this.bgColor=t}}class Motion{constructor(t){this.parent=t}forward(t){this.parent.rect.x+=t*Math.sin(this.parent.rect.direction/90*(Math.PI/2)),this.parent.rect.y+=t*Math.cos(this.parent.rect.direction/90*(Math.PI/2)),_DEBUG&&console.log(`Moved sprite '${this.parent.name}' forward ${t} pixels. New position is (${this.parent.rect.x}, ${this.parent.rect.y}).`)}right(t){for(_DEBUG&&console.log(`Turned sprite '${this.parent.name}' right ${t} degrees.`),this.parent.rect.direction-=t;this.parent.rect.direction>180&&this.parent.rect.direction<1/0||this.parent.rect.direction<-180&&this.parent.rect.direction>-1/0;)this.parent.rect.direction+=this.parent.rect.direction>0?-360:360}left(t){for(_DEBUG&&console.log(`Turned sprite '${this.parent.name}' left ${t} degrees.`),this.parent.rect.direction+=t;this.parent.rect.direction>180&&this.parent.rect.direction<1/0||this.parent.rect.direction<-180&&this.parent.rect.direction>-1/0;)this.parent.rect.direction+=this.parent.rect.direction>0?-360:360}goToXY(t,e){this.parent.rect.x=t,this.parent.rect.y=e,_DEBUG&&console.log(`Sent sprite '${this.parent.name}' to position (${t}, ${e}).`)}goTo(t){if("random"==t){var e=Math.floor(Math.random()*this.parent.screen.rect.width),s=Math.floor(Math.random()*this.parent.screen.height);this.parent.rect.x=e,this.parent.rect.y=s,_DEBUG&&console.log(`Sent sprite '${this.parent.name}' to random position (${e}, ${s}).`)}else if("mouse"==t){var e=mouseX,s=mouseY;this.parent.rect.x=e,this.parent.rect.y=s,_DEBUG&&console.log(`Sent sprite '${this.parent.name}' to mouse position at (${e}, ${s}).`)}else{var e=t.rect.x,s=t.rect.y;this.parent.rect.x=e,this.parent.rect.y=s,_DEBUG&&console.log(`Sent sprite '${this.parent.name}' to sprite '${t.name}' at position (${e}, ${s}).`)}}point(t){var e=t;this.parent.rect.direction=e,_DEBUG&&console.log(`Pointed sprite '${this.parent.name}' in direction ${e}.`)}pointTowards(t){var e;if("mouse"==t){var e=pointTowardsXY(this.parent.rect.x,this.parent.rect.y,mouseX,mouseY);_DEBUG&&console.log(`Pointed sprite '${this.parent.name}' towards the mouse. Direction of this sprite is now ${e}`)}else if(t instanceof Sprite)var e=pointTowardsXY(this.parent.rect.x,this.parent.rect.y,t.rect.x,t.rect.y);else throw new ObjectError(`Cannot point to ${t}. Options are an existing Sprite object or 'mouse'.`);this.parent.rect.direction=e}pointTowardsXY(t,e){var s=pointTowardsXY(this.parent.rect.x,this.parent.rect.y,t,e);_DEBUG&&console.log(`Pointed sprite '${this.parent.name}' towards (${t}, ${e}). New direction is ${s}.`),this.parent.rect.direction=s}changeX(t){this.parent.rect.x+=t,_DEBUG&&console.log(`Changed X position of sprite '${this.parent.name}' by ${t}. New Y position is ${this.parent.rect.x}`)}setX(t){this.parent.rect.x=t,_DEBUG&&console.log(`Set X position of sprite '${this.parent.name}' to ${t}.`)}changeY(t){this.parent.rect.y+=t,_DEBUG&&console.log(`Changed Y position of sprite '${this.parent.name}' by ${t}. New Y position is ${this.parent.rect.y}`)}setY(t){this.parent.rect.y=t,_DEBUG&&console.log(`Set Y position of sprite '${this.parent.name}' to ${t}.`)}}class Looks{constructor(t){this.parent=t,this.costumes={},this.costumeNames=[],this.costume=0}addCostume(t,e){var s=document.createElement("img");return s.style.display="none",s.src=e,document.body.appendChild(s),this.costumes[t]={url:e,object:s},this.costumeNames.push(t),_DEBUG&&console.log(`Loading costume '${t}' from '${e}'...`),new Promise(i=>{s.onload=combineFunctions(i,function(){console.log(`Done loading image '${t}' from '${e}'.`)})})}setCostume(t){if("string"==typeof t){if(this.costumeNames.includes(t)){this.costume=t,this.parent.rect.width=this.costumes[t].object.naturalWidth,this.parent.rect.height=this.costumes[t].object.naturalHeight,_DEBUG&&console.log(`Set costume of sprite '${this.parent.name}' to costume '${t}'. Width and height are (${this.parent.rect.width}, ${this.parent.rect.height}).`);return}throw new CostumeError(`Costume name '${t}' does not exist for sprite '${this.parent.name}'.`)}if("number"==typeof t){if(t>=0&&t<this.costumeNames.length&&Number.isInteger(t))this.costume=this.costumeNames[t],this.parent.rect.width=this.costumes[this.costume].object.naturalWidth,this.parent.rect.height=this.costumes[this.costume].object.naturalHeight,_DEBUG&&console.log(`Set costume of sprite '${this.parent.name}' to costume with index ${t}. Name of costume is '${this.costumes[this.costumeNames[t]].name}'. \
Width and height are (${this.parent.rect.width}, ${this.parent.rect.height}).`);else throw new CostumeError(`Costume ID ${t} is not valid for sprite '${this.parent.name}'.`)}}say(t){_DEBUG&&console.log(`Sprite '${this.parent.name}' said '${t}'.`)}sayFor(t,e){return _DEBUG&&console.log(`Sprite '${this.parent.name}' saying '${t}' for ${e} milliseconds.`),new Promise(t=>{setTimeout(combineFunctions(function(){console.log("Done.")},t),e)})}show(){this.parent.screen.canvas.getContext("2d").drawImage(this.costumes[this.costume].object,this.parent.rect.x-this.parent.Looks.costumes[this.parent.Looks.costume].object.width/2,this.parent.rect.y-this.parent.Looks.costumes[this.parent.Looks.costume].object.height/2)}}function combineFunctions(t,e){return function(){t(),e()}}class Sound{constructor(t){this.parent=t,this.sounds=[]}addSound(t,e){var s=new Audio;return s.controls=!1,document.body.appendChild(s),s.src=e,this.sounds.push({name:t,url:e,audioObject:s}),_DEBUG&&console.log(`Added sound '${t}' from '${e}'.`),new Promise(i=>{s.onload=combineFunctions(i,function(){console.log(`Done loading sound '${t}' from '${e}'.`)})})}startSound(t){for(var e=0;e<this.sounds.length;e++)if(this.sounds[e].name==t){this.sounds[e].audioObject.currentTime=0,this.sounds[e].audioObject.play(),_DEBUG&&console.log(`Started sound '${t}' in sprite '${this.parent.name}'.`);return}throw new SoundNameError(`Could not find sound '${t}' in sprite '${this.parent.name}'.`)}playSound(t){for(var e=0;e<this.sounds.length;e++)if(this.sounds[e].name==t)return j=e,this.sounds[e].audioObject.currentTime=0,this.sounds[e].audioObject.play(),_DEBUG&&console.log(`Playing sound '${t}'...`),new Promise(t=>{soundObject=this.sounds[j].audioObject,this.sounds[j].audioObject.onended=combineFunctions(function(){_DEBUG&&(console.log("Done."),soundObject.onended=null)},t)});throw new SoundNameError(`Could not find sound '${t}'`)}setVolume(t){for(var e=0;e<this.sounds.length;e++){if(t<0){this.sounds[e].audioObject.volume=0;continue}if(t>100){this.sounds[e].audioObject.volume=1;continue}this.sounds[e].audioObject.volume=t/100}_DEBUG&&console.log(`Set volume for sprite '${this.parent.name}' to ${Math.round(100*this.sounds[0].audioObject.volume)}.`)}changeVolume(t){for(var e=0;e<this.sounds.length;e++){if(100*this.sounds[e].audioObject.volume>100-t&&t>0){this.sounds[e].audioObject.volume=1;continue}if(100*this.sounds[e].audioObject.volume<0+t&&t<0){this.sounds[e].audioObject.volume=0;continue}this.sounds[e].audioObject.volume+=t/100}_DEBUG&&console.log(`Changed sound volume for sprite '${this.parent.name}' by ${t}. New volume is ${Math.round(100*this.sounds[0].audioObject.volume)}.`)}stopAll(){for(var t=0;t<this.sounds.length;t++)this.sounds[t].audioObject.pause(),this.sounds[t].audioObject.currentTime=0;_DEBUG&&console.log(`Stopped all sounds in sprite '${this.parent.name}'`)}}class Control{constructor(t){this.p=parent}wait(t){return new Promise(function(e,s){setTimeout(e,t)})}}class Sensing{constructor(t){this.parent=t}touching(t){return"mouse"==t?this.parent.rect.x-this.parent.rect.width/2<=mouseX&&this.parent.rect.x-this.parent.rect.width/2>mouseX-this.parent.rect.width&&this.parent.rect.y-this.parent.rect.height/2<=mouseY&&this.parent.rect.y-this.parent.rect.height/2>mouseY-this.parent.rect.height:"bottom-edge"==t?this.parent.rect.y+this.parent.rect.height/2>=this.parent.screen.rect.height:"top-edge"==t?this.parent.rect.y-this.parent.rect.height/2<=0:"left-edge"==t?this.parent.rect.x-this.parent.rect.width/2<=0:"right-edge"==t?this.parent.rect.x+this.parent.rect.width/2>=this.parent.screen.rect.width:t instanceof Sprite?this.parent.rect.x-this.parent.rect.width/2<=t.rect.x+t.rect.width/2&&this.parent.rect.x-this.parent.rect.width/2>this.parent.rect.x-this.parent.rect.width/2&&this.parent.rect.y-this.parent.rect.height/2<=t.rect.y+t.rect.height/2&&this.parent.rect.y-this.parent.rect.height/2>this.parent.rect.y-this.parent.rect.height/2:void 0}distanceTo(t){return"mouse"==t?Math.sqrt(Math.pow(mouseX-this.parent.rect.x,2)+Math.pow(mouseY-this.parent.rect.y,2)):t instanceof Sprite?Math.sqrt(Math.pow(t.rect.x-this.parent.rect.x,2)+Math.pow(t.rect.y-this.parent.rect.y,2)):void 0}}class Rect{constructor(t){this.x=0,this.y=0,this.width=0,this.height=0,this.direction=90,this.parent=t}}class ScreenRect extends Rect{constructor(t,e){super(),this.parent=null,this.direction=null,this.width=t,this.height=e}}class Sprite{constructor(t,e){if(this.rect=new Rect(this),this.screen=e,_nu.includes(t))throw new SpriteNameError(`A sprite with the name '${t}' already exists. Names not available are as follows:
${JSON.stringify(_nu)}`);this.name=t,_nu+=t,this.Motion=new Motion(this),this.Looks=new Looks(this),this.Sensing=new Sensing(this),this.Sound=new Sound(this),this.Control=new Control(this),_DEBUG&&console.log(`Created sprite with name '${t}'`)}}
